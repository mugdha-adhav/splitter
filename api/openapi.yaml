openapi: 3.1.0
info:
  title: Expense Splitter API
  description: API for managing users and expenses in an expense splitting application
  version: 0.0.1

servers:
  - url: https://dev.splitter.mriyam.com/api
    description: Development server
  - url: https://splitter.mriyam.com/api
    description: Production server
  - url: http://localhost:8080/api
    description: Local server

tags:
  - name: Auth
    description: Authentication operations
  - name: Users
    description: User management operations
  - name: Expenses
    description: Expense management operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 6
        name:
          type: string
          description: Required only for registration
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT token for authentication

    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        name:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - email

    Expense:
      type: object
      properties:
        id:
          type: integer
          format: uint
        title:
          type: string
        description:
          type: string
        amount:
          type: number
          format: float
        paid_by:
          type: integer
          format: uint
        splits:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseSplit'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - title
        - amount
        - paid_by
        - splits

    ExpenseSplit:
      type: object
      properties:
        id:
          type: integer
          format: uint
        user_id:
          type: integer
          format: uint
        share_ratio:
          type: number
          format: float
        amount:
          type: number
          format: float
      required:
        - user_id
        - share_ratio
        - amount

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: Email already registered

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /users:
    get:
      tags:
        - Users
      summary: List all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: uint
    get:
      tags:
        - Users
      summary: Get user by ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete user
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '409':
          description: Cannot delete user with associated expenses

  /expenses:
    get:
      tags:
        - Expenses
      summary: List all expenses
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
    post:
      tags:
        - Expenses
      summary: Create a new expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
      responses:
        '201':
          description: Expense created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'

  /expenses/{expenseId}:
    parameters:
      - name: expenseId
        in: path
        required: true
        schema:
          type: integer
          format: uint
    get:
      tags:
        - Expenses
      summary: Get expense by ID
      responses:
        '200':
          description: Expense details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '404':
          description: Expense not found
    put:
      tags:
        - Expenses
      summary: Update expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
      responses:
        '200':
          description: Expense updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '404':
          description: Expense not found
    delete:
      tags:
        - Expenses
      summary: Delete expense
      responses:
        '204':
          description: Expense deleted successfully
        '404':
          description: Expense not found

  /expenses/user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: uint
    get:
      tags:
        - Expenses
      summary: Get all expenses for a user
      responses:
        '200':
          description: List of expenses for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
